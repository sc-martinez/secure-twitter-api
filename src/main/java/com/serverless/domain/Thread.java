package com.serverless.domain;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.*;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

import java.io.IOException;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import com.serverless.commons.DynamoDBAdapter;
import org.apache.log4j.Logger;


@DynamoDBTable(tableName = "PLACEHOLDER_THREADS_TABLE_NAME")
public class Thread {

    private static final String TABLE_NAME = System.getenv("THREADS_TABLE_NAME");

    private static DynamoDBAdapter db_adapter;
    private final AmazonDynamoDB client;
    private final DynamoDBMapper mapper;

    private Logger logger = Logger.getLogger(this.getClass());

    private String id;
    private String owner;


    private Date created;


    private List<Message> messages;

    @DynamoDBAttribute(attributeName = "messages")
    public List<Message> getMessages() {
        return messages;
    }

    public void setMessages(List<Message> messages) {
        this.messages = messages;
    }

    public void addMessage(Message message) {
        this.messages.add(message);
    }


    @DynamoDBAttribute(attributeName = "created")
    @DynamoDBAutoGeneratedTimestamp(strategy=DynamoDBAutoGenerateStrategy.CREATE)
    public Date getCreated() {
        return created;
    }

    public void setCreated(Date created) {
        this.created = created;
    }


    @DynamoDBHashKey(attributeName = "id")
    @DynamoDBAutoGeneratedKey
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    @DynamoDBRangeKey(attributeName = "owner")
    public String getOwner() {
        return this.owner;
    }

    public void setOwner(String owner) {
        this.owner = owner;
    }

    public Thread() {
        // build the mapper config
        DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
                .withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TABLE_NAME))
                .build();
        // get the db adapter
        this.db_adapter = DynamoDBAdapter.getInstance();
        this.client = this.db_adapter.getDbClient();
        // create the mapper with config
        this.mapper = this.db_adapter.createDbMapper(mapperConfig);
    }

    public String toString() {
        return String.format("Thread [id=%s, owner=%s]", this.id, this.owner);
    }

    // methods
    public Boolean ifTableExists() {
        return this.client.describeTable(TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
    }

    public List<Thread> list() throws IOException {
        DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
        List<Thread> results = this.mapper.scan(Thread.class, scanExp);
        for (Thread p : results) {
            logger.info("Thread - list(): " + p.toString());
        }
        return results;
    }

    public Thread get(String id) throws IOException {
        Thread thread = null;

        HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
        av.put(":v1", new AttributeValue().withS(id));

        DynamoDBQueryExpression<Thread> queryExp = new DynamoDBQueryExpression<Thread>()
                .withKeyConditionExpression("id = :v1")
                .withExpressionAttributeValues(av);

        PaginatedQueryList<Thread> result = this.mapper.query(Thread.class, queryExp);
        if (!result.isEmpty()) {
            thread = result.get(0);
            logger.info("Threads - get(): Thread - " + thread.toString());
        } else {
            logger.info("Threads - get(): Thread - Not Found.");
        }
        return thread;
    }

    public void save(Thread thread) throws IOException {
        logger.info("Thread - save(): " + thread.toString());
        this.mapper.save(thread);
    }

    public Boolean delete(String id) throws IOException {
        Thread thread = null;

        // get User if exists
        thread = get(id);
        if (thread != null) {
            logger.info("Thread - delete(): " + thread.toString());
            this.mapper.delete(thread);
        } else {
            logger.info("Thread - delete(): Thread - does not exist.");
            return false;
        }
        return true;
    }

}