
service: twitter-api
frameworkVersion: '3'

custom:
  usersTableName: 'java-users-${self:provider.stage}'
  threadsTableName: 'java-threads-${self:provider.stage}'
  authorizerARN: 'arn:aws:cognito-idp:us-east-1:771784633686:userpool/us-east-1_B9lNLt23I'

provider:
  name: aws
  runtime: java8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    USERS_TABLE_NAME: ${self:custom.usersTableName}
    THREADS_TABLE_NAME: ${self:custom.threadsTableName}

  iamRoleStatements:
    - Effect: Allow
      Action:
          - dynamodb:Query
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:DeleteItem
      Resource:
          - { "Fn::GetAtt": [ "UsersDynamoDBTable", "Arn" ] }
          - { "Fn::GetAtt": [ "ThreadsDynamoDBTable", "Arn" ] }


package:
  artifact: 'target/${self:service}-${self:provider.stage}.jar'

plugins:
  - serverless-auto-swagger

functions:
  listUsers:
    handler: com.serverless.services.ListUsers
    timeout: 300
    events:
      - http:
          path: /users
          method: get
          cors: true
          authorizer:
              arn: ${self:custom.authorizerARN}
  getUser:
    handler: com.serverless.services.GetUser
    timeout: 300
    events:
      - http:
          path: /users/{id}
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

  registerUser:
    handler: com.serverless.services.RegisterUser
    timeout: 300
    events:
      - http:
          path: /users
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

  deleteUser:
    handler: com.serverless.services.DeleteUser
    timeout: 300
    events:
      - http:
          path: /users/{id}
          method: delete
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

  createThread:
    handler: com.serverless.services.CreateThread
    timeout: 300
    events:
      - http:
          path: /thread/
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

  listThreads:
    handler: com.serverless.services.ListThreads
    timeout: 300
    events:
      - http:
          path: /thread
          method: get
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

  postComment:
    handler: com.serverless.services.CommentThread
    timeout: 300
    events:
      - http:
          path: /thread/comment/{id}
          method: post
          cors: true
          authorizer:
            arn: ${self:custom.authorizerARN}

resources:
  Resources:
    UsersDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.usersTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ThreadsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.threadsTableName}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: owner
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
